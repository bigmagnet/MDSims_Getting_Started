# REMEMBER TO DOUBLE CHECK ALL PARAMETERS BEFORE SUBMITTING!

[automate]
num_mols = 1 # the number of molecules to run. Input 'all' to run every molecule
mol1 = acetone
  # if all was not specified, input the name of each molecule with keys mol#
surface_dir = none # specify the directory where the surface files are stored. This must include a pdb correctly
# named and shifted pdb called 'surface_valid.pdb' and an str called 'surface.str'. Or specify None if this is intended to be a pure liquid simulation
#num_boxes = 5 # the number of boxes to run
num_boxes = 3 # the number of boxes to run
box_folder = control # found by the path MDSim/data/box_data/molecule/box_folder
sim_folder = control # found by the path MDSim/data/simulation_results/molecule/sim_folder
# specify number of unique parameters to use. This is useful for the automation of running a single molecule
# at different temperatures, for example. The user will have to edit a new script_params.ini for each unique run of any script
# a single job is submitted which will run every unique run
unique_params = 3

# the following sections are the submit parameters. These are used only by MDSim_automate.py to write the .sh files
[packmol_vmd_sub]
node_type = hima # hima
env = openmm_mpi_cuda # conda environment name. openmm_mpi_cuda for me
job_name = packmol_vmd
script = MDSim/scripts/make_box.py # the main script is MDSim/scripts/make_box.py
run = yes # run this step? yes or no

[pdb_merge_sub]
node_type = hima # hima
env = mda # conda environment name. mda for me
job_name = pdb_merge
script = MDSim/scripts/pdb_merge.py # the main script is MDSim/scripts/pdb_merge.py
# no run section because this is not really separate from packmol_vmd. This is automatically submitted if
# packmol_vmd is submitted and a surface_dir is provided

[openmm_sub]
gpu = yes # yes or no
node_type = hima # hima
env = openmm_mpi_cuda # conda environment name. openmm_mpi_cuda for me
job_name = openmm
script = MDSim/scripts/openmm_CHARMM.py # the main script is MDSim/scripts/openmm_CHARMM.py
run = yes # run this step? yes or no

[inter_sub]
node_type = vortex # bora or vortex
num_nodes = 5 # requested nodes
processors_pn = 12 # processors per node. bora = 20, hima = 32, vortex = 12
np = 25 # number of processes. processes per node is calculated automatically. Should be a multiple of num_nodes
env = MDenv_vortex # conda environment name. mda for bora or MDenv_vortex for vortex for me
job_name = inter
script = MDSim/scripts/inter_anisotropic.py # for isotropic systems, the main script is MDSim/scripts/inter_configparser.py
# for anisotropic systems, the main script is MDSim/scripts/inter_anisotropic.py
run = no # run this step? yes or no. As of 12/6/23, inter jobs on large systems (liquid V > 64000) are better run with MDSim/scripts/leaky_jobs.py

[intra_sub]
node_type = bora # bora or vortex
num_nodes = 2 # requested nodes
processors_pn = 12 # processors per node. bora = 20, hima = 32, vortex = 12
np = 40 # number of processes. processes per node is calculated automatically. Should be a multiple of num_nodes
env = mda # conda environment name. mda for bora or MDenv_vortex for vortex for me
job_name = intra
script = MDSim/scripts/intra_anisotropic.py # for isotropic systems, the main script is MDSim/scripts/intra_configparser.py
# for anisotropic systems, the main script is MDSim/scripts/intra_anisotropic.py
run = yes # run this step? yes or no

[diffusion_sub]
node_type = hima # hima
env = mda # conda environment name. mda for me
job_name = diffusion
script = MDSim/scripts/diffusion.py # the main script is MDSim/scripts/diffusion.py
run = no # run this step? yes or no

[results_sub]
node_type = hima # hima
env = openmm_mpi_cuda # conda environment name. openmm_mpi_cuda for me
job_name = results_ani
script = MDSim/scripts/collect_results_anisotropic.py # the main script is MDSim/scripts/collect_results.py
run = no # run this step? yes or no
table_rows = params # specify how to make the output tables. collect_results.py will output the T12, T12,R, T12,T,
# tauR, tauT, dwR, and dwT as the colunms. The rows can be specified to either be the molecules (specify 'mols'), which would be 
# more helpful when running many molecules with 1 set of parameters, or the parameters (specify 'params'), which
# would be more helpful when running one molecule with many different parameters. When running many molecules with many
# parameters, whichever option is not specified here, a new table will be created