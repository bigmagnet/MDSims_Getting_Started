import sys

def atom_name_int_to_char(input, output):
    # probably will never use this ever again, but keeping just in case. 
    char = ['X', 'Y', 'Z']
    with open(sys.argv[1], 'r') as f:
        lines = f.readlines()
    with open(sys.argv[2], 'w') as f:
        count = 0
        while len(lines[count].split()) != 10:
            f.write(lines[count])
        for i in range(count,len(lines)):
            args = lines[i].split()
            if args[4][0] == 'C':
                last_C = i
            elif args[4][0] == 'H':
                replace = args[4][:-1] + char[i-last_C-1]
                ind = lines[i].find(args[4])
            lines[i][ind:len(args[4])] = replace
            f.write(lines[i])
        
def replace(input, output, to_replace, replacement):
    # useful for editing surface pdbs generated by CHARMM-GUI
    with open(input, 'r') as f:
        lines = f.readlines()
    with open(output, 'w') as f:
        for i in range(len(lines)):
            ind = lines[i].find(to_replace)
            if ind != -1:
                lines[i] = lines[i][:ind] + replacement + lines[i][ind+len(replacement):]
            f.write(lines[i])

def add_spaces(input):
    # it is potentially convenient to allow for spaces to be considered in to_replace and replacement
    # however, sys will interpret spaces as new entries in sys.argv, which we don't want
    # If the user wishes to replace spaces, input underscores instead, and this function will replace them with spaces
    return input.replace('_', ' ')

if __name__ == '__main__':
    to_replace = add_spaces(sys.argv[3])
    replacement = add_spaces(sys.argv[4])
    replace(sys.argv[1], sys.argv[2], to_replace, replacement)
        